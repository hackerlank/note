CGI  和q FastCGI 是两个协议

CGI 通用网关接口（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在網絡服务器上的程序请求数据
CGI 每处理一个请求都需要 fork 一个全新的进程

FPM (FastCGI Process Manager)，它是 FastCGI 的实现，任何实现了 FastCGI 协议的 Web Server 都能够与之通信
FPM 是一个 PHP 进程管理器，包含 master 进程和 worker 进程两种进程：master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个 (具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器
ps -rf | grep fpm 查看

从 FPM 接收到请求，到处理完毕，其具体的流程如下：
1 FPM 的 master 进程接收到请求
2 master 进程根据配置指派特定的 worker 进程进行请求处理，如果没有可用进程，返回错误，这也是我们配合 Nginx 遇到502错误比较多的原因
3 worker 进程处理请求，如果超时，返回504错误
4 请求处理结束，返回结果

Nginx 的 fastcgi 模块提供了 fastcgi_param 指令来主要处理这些映射关系
fastcgi_pass 指令用于指定 fpm 进程监听的地址，Nginx 会把所有的 php 请求翻译成 fastcgi 请求之后再发送到这个地址

五层网络协议
1 应用层(http/https/websocket/ftp...) => 定义：文本传输协议
2 传输层(tcp/udp) => 定义：端口
3 网络层(ip)　=> 定义：IP
4 链路层(mac&数据包) => 定义：数据包，MAC地址
5 实体层(光缆/电缆/交换机/路由/终端...) => 定义：物理

TCP/IP connect: TCP/IP的三次握手:
1       	 标有syn的数据包
        	------------->
2   	    标有syn/ack的数据包
	client  <-------------  server
3       	 标有ack的数据包
        	-------------->

TCP/IP:
解释一：分别代表tcp协议和ip协议
解释二：如果按照网络五层架构，TCP/IP代表除了应用层其他层所有协议簇的统称

HTTP Method
get: 	 获取资源，url传参，大小2KB
post: 	 传输资源，http body, 大小默认8M，1000个input variable
put: 	 传输资源，http body，资源更新
delete:  删除资源
patch: 	 传输资源，http body，存在的资源局部更新
head: 	 获取http header
options: 获取支持的method
trace: 	 追踪，返回请求回环信息
connect: 建立隧道通信

HTTP Status
200: ok
301: 永久重定向
302: 临时重定向
303: 临时重定向，要求用get请求资源
304: not modified, 返回缓存，和重定向无关
307: 临时重定向,严格不从post到get
400: 参数错误
401: 未通过http认证
403: forbidden，未授权
404: not found，不存在资源
500: internet server error，代码错误
502: bad gateway，fastcgi返回的内容web server不明白
503: service unavailable，服务不可用
504: gateway timeout，fastcgi响应超时

HTTP Header Fields
常见通用头部
	Cache-Control:
	no-cache: 不缓存过期的缓存
	no-store: 不缓存
	Pragma: no-cache, 不使用缓存，http1.1前的历史字段
	Connection:
	控制不在转发给代理首部不字段
	Keep-Alive/Close: 持久连接
	Date: 创建http报文的日期

常见请求头
	Accept: 可以处理的媒体类型和优先级
	Host: 目标主机域名
	Referer: 请求从哪发起的原始资源URI
	User-Agent: 创建请求的用户代理名称
	Cookie: cookie信息

常见响应头
	Location: 重定向地址
	Server: 被请求的服务web server的信息
	Set-Cookie: 要设置的cookie信息
	NAME: 要设置的键值对
	expires: cookie过期时间
	path: 指定发送cookie的目录
	domain: 指定发送cookie的域名
	Secure: 指定之后只有https下才发送cookie
	HostOnly: 指定之后javascript无法读取cookie

HTTPs
概念:在http协议上增加了ssl(secure socket layer)层
SSL层
应用层
传输层
网络层
链路层
实体层

Websocket
基于http协议建立连接，header的upgrade字段转化协议为websocket
全双工通信，客户端建立连接

HTTP2
多路复用：多个请求共享一个tcp连接
全双工通信
必须https://
头部压缩
二进制传输



openrestr.org/cn/


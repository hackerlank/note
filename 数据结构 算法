数据结构
    是相互之间存在一种或多种特定关系的数据元素的集合

    数据
        是描述客观事物的符号, 是计算机中可以操作的对象, 是能被计算机识别, 并输入给计算机处理的符号集合

    数据元素
        是组成数据的, 有一定意义的基本单位, 在计算机中通常作为整体处理. 也被称为记录

    数据项
        一个数据元素可以有若干个数据项组成  数据项是数据不可分割的最小单位

    数据对象
        是性质相同的数据元素的集合, 是数据的子集

    逻辑结构
        是指数据对象中数据元素之间的相互关系

        1 集合结构
            集合结构中的数据元素出了同属于一个集合外, 它们之间没有其他关系

        2 线性结构
            线性结构中的数据元素之间是一对一的关系

        3 树形结构
            树形结构中的数据元素之间存在一种一对多的层次关系

        4 图形结构
            图形结构的数据元素是多对多的关系

    物理结构
        是指数据的逻辑结构在计算机中的存储形式

        1 顺序存储结构
            是把数据元素存放在地址连续的存储单元里, 其数据间的逻辑关系和物理关系是一致的

        2 链式储存结构
            是把数据元素存放在任意的存储单元里, 这组存储单元可以是连续的, 也可以是不连续的

    数据类型
        是指一组性质相同的值得集合及定义在此集合上的一些操作的总称

    抽象
        是指抽取出事物具有的普遍性的本质

    抽象数据类型(Abstract Data Type, ADT)
        是指一个数学模型及定义在该模型上的一组操作
        "抽象"的意义在于数据类型的数学抽象特性
        抽象数据类型体现了程序设计中问题分解, 抽象和信息隐藏的特性


算法
    算法是解决特定问题求解步骤的描述, 在计算机中变现为指令的有限序列, 并且每条指令表示一个或个多操作

    算法具有五个基本特性: 
        输入
            算法具零个或多个输入
        输出
            算法至少有一个或多个输出
        有穷性
            指算法在执行有限的步骤之后, 自动结束而不会出现无限循环, 并且每一个步骤在可接受的时间内完成 
        确定性
            算法的每一步骤都具有确定的含义, 不会出现二义性
        可行性
            算法的每一步都必须是可行的, 也就是说, 每一步都能够通过执行有限的次数完成

    算法的设计要求
        正确性
            算法的正确性是指算法至少应该具有输入, 输出和加工处理无歧义性 能正确反映问题的需求, 能够得到问题的正确答案
        可读性
            算法设计的另一个目的是为了便于阅读, 理解和交流
        健壮性
            当输入数据不合法时, 算法也能做出相关处理, 而不是产生异常或莫名其妙的结果

    设计算法应该尽量满足时间效率高和储存量低的需求

    算法效率的度量方法
        事后统计方法
            这种方法主要是通过设计好的测试程序和数据, 利用计算机计时器对不同算法编制的程序的运行时间进行比较, 从而确定算法效率的高低
        事前分析估算法
            在计算机程序编制前, 依据统计方法对算法进行估算

        一个程序的运行时间, 依赖于算法的好坏和问题的输入规模. 所谓问题输入规模是指输入量的多少
        在分析程序的运行时间时, 最重要的是把程序看成是独立程序设计语言的算法或一系列步骤

        函数的渐进增长
            给定两个函数 f(n) 和 g(n), 如果存在一个整数N, 使得对于所有的 n > N, f(n) 总是比 g(n) 大, 那么, 我们说 f(n) 的增长渐进快于 g(n)
            判断一个算法的效率时, 函数中的常数和其他次要项常常可以忽略, 而更应该关注主项(最高阶项)的阶数         






